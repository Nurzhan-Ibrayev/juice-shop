name: CI/CD Pipeline with Security Scans

on:
  push:
    branches:
      - master

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Semgrep
        run: |
          curl -s https://semgrep.dev/install | bash

      - name: Run Static Analysis (SAST)
        run: |
          semgrep --config=p/ci --error --exclude .git --exclude node_modules --no-progress

      - name: Create Semgrep report
        id: create_report
        run: |
          # Run semgrep and save the output to a JSON file
          semgrep --config=p/ci --json --no-progress > semgrep_report.json
          
          # Optionally, print the content of the report for debugging
          cat semgrep_report.json

      - name: Upload Semgrep Report as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-report
          path: semgrep_report.json

      - name: Check for vulnerabilities
        id: check_vulnerabilities
        run: |
          # Extract the number of findings from the JSON output
          count=$(jq '[.[] | select(.severity == "ERROR" or .severity == "WARNING")] | length' semgrep_report.json)
          echo "Found $count vulnerabilities"
          
          # Exit code based on severity
          if [ "$count" -gt 0 ]; then
            echo "WARNING: Found $count security issues!"
          else
            echo "No critical vulnerabilities found."
          fi

      - name: Notify about vulnerabilities
        run: |
          count=$(jq '[.[] | select(.severity == "ERROR" or .severity == "WARNING")] | length' semgrep_report.json)
          if [ "$count" -gt 0 ]; then
            # Send a message to a Slack channel or email
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Found security vulnerabilities during the build process. Please review the Semgrep report."}' $SLACK_WEBHOOK_URL
          else
            echo "No vulnerabilities found, proceeding with the pipeline."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: security_scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy application
        run: |
          # Deployment commands here
          echo "Deploying the application..."
